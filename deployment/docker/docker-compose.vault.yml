# Docker Compose configuration for secure secret management
# Use this for production deployments with HashiCorp Vault

version: '3.8'

services:
  # HashiCorp Vault for secret management
  vault:
    image: vault:1.14
    container_name: stream-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_DISABLE_MLOCK: "true"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
      - ./scripts/vault-config:/vault/config
    command: vault server -config=/vault/config/vault.hcl

  # Stream Protocol Attestation Service with Vault integration
  attestation-service:
    build:
      context: ./attestation-service
      dockerfile: Dockerfile
    container_name: stream-attestation
    restart: unless-stopped
    ports:
      - "3001:3001"
    depends_on:
      - vault
      - database
      - redis
    environment:
      # Vault configuration
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN}
      VAULT_NAMESPACE: stream-protocol

      # Service configuration (non-sensitive)
      NODE_ENV: production
      PORT: 3001

      # Database connection (fetched from Vault at runtime)
      DATABASE_URL_SECRET_PATH: secret/stream-protocol/database_url

      # Redis connection (fetched from Vault at runtime)
      REDIS_URL_SECRET_PATH: secret/stream-protocol/redis_url

      # API keys and secrets (fetched from Vault at runtime)
      JWT_SECRET_PATH: secret/stream-protocol/jwt_secret
      ENCRYPTION_KEY_PATH: secret/stream-protocol/encryption_key
      ADMIN_KEY_PATH: secret/stream-protocol/admin_key
    volumes:
      - attestation-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: stream-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-stream_attestations}
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_user
      - postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./sample_data.sql:/docker-entrypoint-initdb.d/02-data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stream-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass "$(cat /run/secrets/redis_password)"
    secrets:
      - redis_password
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: stream-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    depends_on:
      - attestation-service

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: stream-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Log aggregation with Fluentd
  fluentd:
    image: fluentd:v1.16-debian-1
    container_name: stream-fluentd
    restart: unless-stopped
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf
      - attestation-logs:/var/log/attestation
      - nginx-logs:/var/log/nginx
      - vault-logs:/var/log/vault

# Docker secrets for sensitive data
secrets:
  postgres_user:
    external: true
  postgres_password:
    external: true
  redis_password:
    external: true

# Named volumes for persistent data
volumes:
  vault-data:
    driver: local
  vault-logs:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  attestation-logs:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local

# Network configuration
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16